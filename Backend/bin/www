#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');

const moment = require('moment');
require('moment-timezone');
moment.tz.setDefault('Asia/Seoul');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create Socket Communication
 */

const socket = require('socket.io')(server);

socket.on('connection', (soc)=>{
  console.log('a user connected');

  soc.on('user', (data)=>{
    soc.name = data.name;

    socket.emit('newUser', {
      type: 'connect', 
      name: 'SERVER', 
      message: soc.name
    });
  })

  soc.on('msg', (data)=>{
    const now = moment();
    const nHour = now.hours();
    const nMinute = now.minutes();

    const startTime = data.time.split(":");

    let time;

    if (nMinute-startTime[1] < 0) {
      time = (nHour-startTime[0]-1) + ':' + (nMinute-startTime[1]+60);
    }
    else {
      time = (nHour-startTime[0]) + ':' + (nMinute-startTime[1]);
    }

    let res = {time, ...data};

    console.log('name: ', res.name, 'message: ', res.content, 'time: ', res.time);
    soc.broadcast.emit('sendMsg', res);
  });

  soc.on('disconnect', ()=>{
    console.log('user disconnected');
    soc.broadcast.emit('disConnected', {
      type: 'disconnect',
      name: 'SERVER',
      message: soc.name
    })
  })
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
